import java.util.*;

public class Classroom{
    static class Edge{
        int src;
        int dst;
      public  Edge(int s, int d){
            this.src = s;
            this.dst = d;
        }
    }

    public static void creatingAGraphs( ArrayList<Edge> graph[]){
        //Creating empty arraylist fron Null arraylist
        for(int i=0; i<graph.length; i++){
            graph[i]= new ArrayList<Edge>();
        }
        
        graph[0].add(new Edge(0, 1));
        graph[0].add(new Edge(0, 2));
        graph[0].add(new Edge(0, 3));

            graph[1].add(new Edge(1, 0));
            graph[1].add(new Edge(1, 2));
    
            graph[2].add(new Edge(2, 0));
            graph[2].add(new Edge(2, 1));

            graph[3].add(new Edge(3, 0));
            graph[3].add(new Edge(3, 4));
            graph[3].add(new Edge(3, 5));

            graph[4].add(new Edge(4, 3));
            graph[4].add(new Edge(4, 5));

            graph[5].add(new Edge(5, 3));
            graph[5].add(new Edge(5, 4));
    
    }

    public static void dfs(ArrayList<Edge> graph[], int curr, boolean vis[], int dt[], int low[], int time, int par){

        vis[curr]= true; //we always do this weee know why
        dt[curr]=low[curr]= ++time;

        for(int i=0; i< graph[curr].size();i++){
            Edge e = graph[curr].get(i);

            if(e.dst == par){
                continue;
            }else if(!vis[e.dst]){
                dfs(graph, e.dst, vis, dt, low, time, curr);
                low[curr]= Math.min(low[curr],low[e.dst]);
                if(dt(curr)< low[e.dst]){
                    System.out.println("bridge is : "+ curr + "----" e.dst);
                }
            }else{ //If the node is visited
                low[curr]= Math.min(low[curr],dt[e.dst]);
            }
        }
    }

    public static void getBridge(ArrayList<Edge> graph[], int V){
        int dt[]= new dt[V]; //discovery time
        int low[] = new low[V]; //Lowest discovery time
        int time = 0; // intialize time
        boolean vis[] = new boolean[V];

        for (int i=0; i< V; i++){//disconnected graphs
           if(!vis[i]){
            dfs(graph, i, vis, dt, low, time, -1);
           }
        }
    }
    public static void main(String args[]){
        int V = 4;
        ArrayList<Edge> graph[] = new ArrayList[V];
        creatingAGraphs(graph);
        getBridge(graph, V);

        }
    }

